{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputvalue","onSubmit","e","preventDefault","trim","length","console","log","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAMaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAuB9C,OAEI,uBAAMC,SAfW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IAG5BC,QAAQC,IAAI,gBACZV,GAAe,SAAAW,GAAI,OAAIT,GAAJ,mBAAkBS,OACrCR,EAAc,MAOd,UACG,6BAAKD,IACL,uBAAOU,KAAK,OAAMC,MAAOX,EAAYY,SArBlB,SAACT,GAC3BF,EAAcE,EAAEU,OAAOF,c,+BCVbG,EAAO,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,0FAE4EC,UAAUH,GAFtF,qBAGCI,MAAMF,GAHP,cAGbG,EAHa,gBAICA,EAAKC,OAJN,uBAIbC,EAJa,EAIbA,KAEAC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EAEvB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAXrB,kBAgBXM,GAhBW,4CAAF,sDCARO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAIlC,OACI,sBAAKc,UAAU,0CAAf,UACG,qBAAKC,IAAMf,EAAMgB,IAAON,IACxB,4BAAKA,QCDHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECLb,SAACA,GAAc,IAAD,EAEZhB,mBAAS,CAC7BuB,KAAK,GACLa,SAAQ,IAJwB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAsCtC,OA7BAC,qBAAU,WACPxB,EAAQC,GACPwB,MAAM,SAAAC,GAENC,YAAW,WAEPJ,EAAS,CACLf,KAAKkB,EACLL,SAAQ,IAGd5B,QAAQC,IAAIgC,KACZ,UAOH,CAACzB,IAUGqB,EDrBgBM,CAAa3B,GAA7BO,EAZ8B,EAY9BA,KAAKa,EAZyB,EAYzBA,QAcZ,OAEI,eAAC,WAAD,WACA,6BAAMpB,IAGJoB,GAAY,wCAEd,qBAAKJ,UAAU,YAAf,SAIWT,EAAKE,KAAK,SAAAC,GAAG,OACZ,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aExC7BiB,EAAe,WAAO,IAAD,EAEO5C,mBAAS,CAAC,SAAS,cAAc,aAFxC,mBAEtB6C,EAFsB,KAEV9C,EAFU,KAQ9B,OACK,qCACG,kDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEI8C,EAAWpB,KAAI,SAAAT,GAAQ,OACvB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCd9B8B,IAASC,OACN,cAAC,EAAD,IACDC,SAASC,eAAe,W","file":"static/js/main.e53142af.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    \r\n    const [inputValue, setInputvalue] = useState('');\r\n\r\n\r\n\r\n    const handleInputChange = (e)=>{\r\n    setInputvalue(e.target.value);\r\n    }\r\n    \r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        \r\n        if(inputValue.trim().length>2){\r\n\r\n\r\n        console.log('submit hecho')\r\n        setCategories( cats =>[inputValue,...cats]);\r\n        setInputvalue('');\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        \r\n        <form onSubmit={handleSubmit}>\r\n           <h1>{inputValue}</h1>\r\n           <input type=\"text\"value={inputValue} onChange = {handleInputChange}/> \r\n        </form>   \r\n        \r\n    )\r\n\r\n \r\n\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};","\r\n\r\n\r\n export const getGifs= async( category )=>{\r\n    \r\n    const url =`https://api.giphy.com/v1/gifs/search?api_key=51XNXWAxeierrLj9r7yJImbSYTUMMicx&q=${ encodeURI(category)}&limit=5`\r\n    const resp =  await fetch(url);\r\n    const{data} = await resp.json();\r\n\r\n    const gifs = data.map(img =>{\r\n  \r\n         return {\r\n           id: img.id,\r\n           title:img.title,\r\n           url:img.images?.downsized_medium.url\r\n              \r\n        }\r\n    })\r\n   \r\n     return gifs;\r\n\r\n}\r\n","\r\nimport React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n\r\n    \r\n\r\n    return (\r\n        <div className='card  animate__animated animate__bounce'>\r\n           <img src={ url } alt ={ title }/>\r\n           <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport React ,{/* useState,useEffect, */ Fragment} from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n /* const [images, setImages] = useState([])\r\n  \r\n    useEffect(()=>{\r\n        getGifs(category)\r\n            .then(setImages)\r\n    },[category]) */\r\n\r\n\r\n        \r\n\r\n    const {data,loading} = useFetchGifs(category);\r\n    //console.log(state);\r\n    //console.log(loading);\r\n\r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n    //getGifs();\r\n\r\n//?\r\n    return (\r\n\r\n        <Fragment>\r\n        <h3>{ category }</h3>\r\n        \r\n\r\n        { loading  && <p>Loading</p> }\r\n\r\n        <div className=\"card-grid\">\r\n            \r\n           \r\n                  {\r\n                   data.map( img =>(\r\n                    <GifGridItem key={img.id} {...img}/>\r\n                   ))\r\n                   } \r\n        </div>\r\n\r\n        </Fragment>\r\n        \r\n    )\r\n}\r\n","import { useState,useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n   \r\n    const [state, setState] = useState({\r\n          data:[],\r\n          loading:true\r\n\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n       getGifs(category)\r\n       .then( imgs =>{\r\n         \r\n        setTimeout(()=>{\r\n               \r\n            setState({\r\n                data:imgs,\r\n                loading:false\r\n             })\r\n\r\n          console.log(imgs)   \r\n        },3000);\r\n\r\n\r\n       })\r\n\r\n\r\n\r\n    }, [category])\r\n\r\n\r\n\r\n\r\n\r\n    //return state ;//\r\n\r\n\r\n\r\n    return state;\r\n      \r\n}\r\n","import React from 'react'\r\nimport  { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n     const [categories, setCategories] = useState(['halsey','miley cyrus','dua lipa'])\r\n    // const handleAdd =()=>{\r\n    //     setCategories([...categories,'dualipa']);\r\n       \r\n    // }\r\n\r\n    return (\r\n         <>\r\n            <h2> GIF EXPERT APP </h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n            <ol>\r\n               {\r\n                categories.map(category=>(\r\n                <GifGrid key={category} category={category}/>\r\n                ))\r\n               }\r\n            </ol>\r\n        </>\r\n       \r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\n\n//import App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n   <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}